package JUnitTests;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import Game.Item;
import Game.Player;
import food.Fly;
import food.Fruit;
import medicine.PetMedicine;
import pets.Cat;
import pets.Pets;

public class FlyTest {

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	
	/**
	 * Test if I can break a fly. Since it is a consumable, should expect it to fail and throw an exception
	 * if there are still uses.
	 */
	@Test
	public void testBreakFly() {
		Item testFly = new Fly();
		Player itemOwner = new Player(new ArrayList<Pets>(), "Test Player");
		itemOwner.addItem(testFly);
		thrown.expect(RuntimeException.class);
		thrown.expectMessage("Can't remove/break a consumable when still has uses.");
		testFly.breakItem(itemOwner);
		
		
	}
	
	
	/**
	 * Test if we can accurately check if two different instances are flies.
	 */
	@Test
	public void testEquals() {
		Item fly1 = new Fly();
		Item fly2 = new Fly();
		Item notFly = new PetMedicine();
		
		assertTrue(fly1.equals(fly2));
		assertFalse(fly1.equals(notFly));
	}
	
	/**
	 * Test the hash code generated by the fly item.
	 */
	@Test
	public void testHashCode() {
		Item fly = new Fly();
		double restoreValue = fly.getRestoreValue();
		int hashCode = (int) restoreValue * 31 + 17;
		assertEquals(hashCode, fly.hashCode());
	}
	
	/**
	 * Test if we can increase the number of uses of a fly instance. 
	 */
	@Test
	public void testIncreaseNumUses() {
		Item testFly = new Fly();
		testFly.increaseNumUses();
		assertEquals(2, testFly.getNumUses());
		testFly.increaseNumUses(2);
		assertEquals(4, testFly.getNumUses());
	}

	/**
	 * Test if a single consumable food item added to the player's inventory will be
	 * removed after its use. Inventory should be empty afterwards.
	 */
	@Test
	public void testUseFly() {
		ArrayList<Pets> pets = new ArrayList<Pets>();
		pets.add(new Cat("Test Cat"));
		Player testPlayer = new Player(pets, "Test Player");
		testPlayer.addItem(new Fly());
		
		Pets testPet = testPlayer.getPetArray().get(0);
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		
		assertEquals(0, testPlayer.getInventory().size());
	}
	
	/**
	 * Test if multiple food instances (that are stacked in the player's inventory) 
	 * will be removed after use.
	 */
	@Test
	public void testUseStackedFly() {
		ArrayList<Pets> pets = new ArrayList<Pets>();
		pets.add(new Cat("Test Cat"));
		Player testPlayer = new Player(pets, "Test Player");
		testPlayer.addItem(new Fly());
		testPlayer.addItem(new Fly());
		
		Pets testPet = testPlayer.getPetArray().get(0);
		
		assertEquals(1, testPlayer.getInventory().size());
		assertEquals(2, testPlayer.getInventory().get(0).getNumUses());
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		
		assertEquals(1, testPlayer.getInventory().size());
		assertEquals(1, testPlayer.getInventory().get(0).getNumUses());
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		
		assertEquals(0, testPlayer.getInventory().size());
	}
	
	/**
	 * Test it correctly identifies a fly instance to be a food item.
	 */
	@Test
	public void testIsFood() {
		Item testFood = new Fly();
		assertFalse(testFood.isMedicine());
		assertTrue(testFood.isFood());
		assertFalse(testFood.isToy());
	}

}
