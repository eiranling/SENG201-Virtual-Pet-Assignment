package JUnitTests;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import Game.Item;
import Game.Player;
import medicine.PetMedicine;
import pets.Pets;
import toy.Bone;
import toy.HamBall;

public class HamBallTest {

	/**
	 * Test if I can break a hamster ball. Since it is a non-consumable toy, it should be removed
	 * from the player's inventory when broken.
	 */
	@Test
	public void testBreakHamBall() {
		Item testHamBall = new HamBall();
		Player itemOwner = new Player(new ArrayList<Pets>(), "Test Player");
		itemOwner.addItem(testHamBall);
		assertEquals(1, itemOwner.getInventory().size());
		testHamBall.breakItem(itemOwner);
		assertEquals(0, itemOwner.getInventory().size());
		
		
	}
	
	
	/**
	 * Test if we can accurately check if two different instances are hamster balls.
	 */
	@Test
	public void testEquals() {
		Item hamBall1 = new HamBall();
		Item hamBall2 = new HamBall();
		Item notHamBall = new PetMedicine();
		
		assertTrue(hamBall1.equals(hamBall2));
		assertFalse(hamBall1.equals(notHamBall));
	}
	
	/**
	 * Test the hash code generated by the hamsterball item.
	 */
	@Test
	public void testHashCode() {
		Item hamBall = new HamBall();
		double restoreValue = hamBall.getRestoreValue();
		int hashCode = (int) restoreValue * 31 + 17;
		assertEquals(hashCode, hamBall.hashCode());
	}
	
	/**
	 * Test if we can increase the number of uses of a hamsterball instance. 
	 */
	@Test
	public void testIncreaseNumUses() {
		Item testHamBall = new HamBall();
		int hamBullUse = testHamBall.getNumUses();
		testHamBall.increaseNumUses();
		assertEquals(hamBullUse + 1, testHamBall.getNumUses());
		testHamBall.increaseNumUses(2);
		assertEquals(hamBullUse + 3, testHamBall.getNumUses());
	}

	/**
	 * Test if a single non-consumable hamster ball item added to the player's inventory will be
	 * in the player's inventory until the durability/uses drops to 0.
	 */
	@Test
	public void testUseHamBall() {
		class SuperPet extends Pets {
			/**
			 * Pet that never gets tired (for testing only).
			 */

			public SuperPet(String givenName) {
				super(givenName);
				super.energy = Double.MAX_VALUE;
			}
			
			@Override
			public String eat(Item f) {
				//too nothing
				return null;
			}

			@Override
			public String sleep() {
				//Do nothing
				return null;
			}

			@Override
			public String playWithToy(Item t) {
				//Do nothing
				return null;
			}

			@Override
			public String heal(Item m) {
				//Do nothing
				return null;
			}
		}
		
		int hamBallUses = new HamBall().getNumUses();
		
		ArrayList<Pets> pets = new ArrayList<Pets>();
		pets.add(new SuperPet("Test Pet"));
		Player testPlayer = new Player(pets, "Test Player");
		testPlayer.addItem(new HamBall());
		
		Pets testPet = testPlayer.getPetArray().get(0);
		
		assertEquals(1, testPlayer.getInventory().size());

		//Use it until it gets to it's durability is reduced to 1
		for(int i = hamBallUses-1; i > 0; i--) {
			testPlayer.getInventory().get(0).use(testPlayer, testPet);
			assertEquals(i, testPlayer.getInventory().get(0).getNumUses());
		}
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		assertEquals(0, testPlayer.getInventory().size());

		
	}
	
	/**
	 * Test if  it correctly identifies a hamster ball instance to be a toy item.
	 */
	@Test
	public void testIsToy() {
		Item testToy = new HamBall();
		assertFalse(testToy.isMedicine());
		assertFalse(testToy.isFood());
		assertTrue(testToy.isToy());
	}

}
