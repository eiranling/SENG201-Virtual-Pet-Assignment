package JUnitTests;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import Game.Item;
import Game.Player;
import medicine.PetMedicine;
import pets.Pets;
import toy.Bone;

public class BoneTest {
	
	/**
	 * Test if I can break a bone. Since it is a toy, should expect it to be removed from the player's inventory.
	 */
	@Test
	public void testBreakBone() {
		Item testBone = new Bone();
		Player itemOwner = new Player(new ArrayList<Pets>(), "Test Player");
		itemOwner.addItem(testBone);
		assertEquals(1, itemOwner.getInventory().size());
		testBone.breakItem(itemOwner);
		assertEquals(0, itemOwner.getInventory().size());
		
		
	}
	
	
	/**
	 * Test if we can accurately check if two different instances are bones.
	 */
	@Test
	public void testEquals() {
		Item bone1 = new Bone();
		Item bone2 = new Bone();
		Item notBone = new PetMedicine();
		
		assertTrue(bone1.equals(bone2));
		assertFalse(bone1.equals(notBone));
	}
	
	/**
	 * Test the hash code generated by the bone item.
	 */
	@Test
	public void testHashCode() {
		Item bone = new Bone();
		double restoreValue = bone.getRestoreValue();
		int hashCode = (int) restoreValue * 31 + 17;
		assertEquals(hashCode, bone.hashCode());
	}
	
	/**
	 * Test if we can increase the number of uses of a bone instance. 
	 */
	@Test
	public void testIncreaseNumUses() {
		Item testBone = new Bone();
		testBone.increaseNumUses();
		assertEquals(16, testBone.getNumUses());
		testBone.increaseNumUses(2);
		assertEquals(18, testBone.getNumUses());
	}

	/**
	 * Test if a single non-consumable bone item added to the player's inventory will be
	 * in the player's inventory until the durability/uses drops to 0.
	 */
	@Test
	public void testUseBone() {
		class SuperPet extends Pets {
			/**
			 * Pet that never gets tired (for testing only).
			 */

			public SuperPet(String givenName) {
				super(givenName);
				super.energy = Double.MAX_VALUE;
			}
			
			@Override
			public String eat(Item f) {
				//too nothing
				return null;
			}

			@Override
			public String sleep() {
				//Do nothing
				return null;
			}

			@Override
			public String playWithToy(Item t) {
				//Do nothing
				return null;
			}

			@Override
			public String heal(Item m) {
				//Do nothing
				return null;
			}
		}
		
		ArrayList<Pets> pets = new ArrayList<Pets>();
		pets.add(new SuperPet("Test Pet"));
		Player testPlayer = new Player(pets, "Test Player");
		testPlayer.addItem(new Bone());
		
		Pets testPet = testPlayer.getPetArray().get(0);
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		assertEquals(14, testPlayer.getInventory().get(0).getNumUses());
		System.out.println(testPlayer.getInventory().get(0).getNumUses());
		
		//Use it until it gets to 1 durability
		for(int i = 13; i > 0; i--) {
			testPlayer.getInventory().get(0).use(testPlayer, testPet);
			assertEquals(i, testPlayer.getInventory().get(0).getNumUses());
		}
		
		testPlayer.getInventory().get(0).use(testPlayer, testPet);
		assertEquals(0, testPlayer.getInventory().size());

		
	}
	
	/**
	 * Test it correctly identifies a Bone instance to be a toy item.
	 */
	@Test
	public void testIsToy() {
		Item testToy = new Bone();
		assertFalse(testToy.isMedicine());
		assertFalse(testToy.isFood());
		assertTrue(testToy.isToy());
	}
	
}
